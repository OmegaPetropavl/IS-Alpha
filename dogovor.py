# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dogovor.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import MySQLdb as mdb
from docx import Document
from docx.shared import Inches
from PyQt5.QtGui import QIcon
import images


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Создание договора")
        Dialog.setFixedSize(640, 588)
        icon = QIcon((":/logocompany.png"))
        Dialog.setWindowIcon(icon)
        self.background = QtWidgets.QWidget(Dialog)
        self.background.setGeometry(QtCore.QRect(0, -10, 641, 601))
        self.background.setAutoFillBackground(False)
        self.background.setStyleSheet("#background {\n"
"background-color: rgb(170, 170, 200)\n"
"}")
        self.background.setObjectName("background")
        self.label = QtWidgets.QLabel(self.background)
        self.label.setGeometry(QtCore.QRect(150, 200, 151, 20))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.background)
        self.label_2.setGeometry(QtCore.QRect(150, 240, 141, 20))
        self.label_2.setObjectName("label_2")
        self.viborarendatora = QtWidgets.QComboBox(self.background)
        self.viborarendatora.setGeometry(QtCore.QRect(340, 200, 151, 22))
        self.viborarendatora.setObjectName("viborarendatora")
        self.viborobjecta = QtWidgets.QComboBox(self.background)
        self.viborobjecta.setGeometry(QtCore.QRect(340, 240, 151, 22))
        self.viborobjecta.setObjectName("viborobjecta")
        self.viborobjecta.currentTextChanged.connect(lambda: self.changeoplata())
        self.label_3 = QtWidgets.QLabel(self.background)
        self.label_3.setGeometry(QtCore.QRect(150, 280, 151, 20))
        self.label_3.setObjectName("label_3")
        self.label_7 = QtWidgets.QLabel(self.background)
        self.label_7.setGeometry(QtCore.QRect(150, 320, 151, 20))
        self.label_7.setObjectName("label_7")
        self.dataokonchaniyaarendy = QtWidgets.QDateEdit(self.background)
        self.dataokonchaniyaarendy.setGeometry(QtCore.QRect(340, 320, 151, 22))
        self.dataokonchaniyaarendy.setObjectName("dataokonchaniyaarendy")
        self.datanachalaarendy = QtWidgets.QDateEdit(self.background)
        self.datanachalaarendy.setGeometry(QtCore.QRect(340, 280, 151, 22))
        self.datanachalaarendy.setObjectName("datanachalaarendy")
        self.label_8 = QtWidgets.QLabel(self.background)
        self.label_8.setGeometry(QtCore.QRect(150, 360, 161, 20))
        self.label_8.setObjectName("label_8")
        self.datazakldogovora = QtWidgets.QDateEdit(self.background)
        self.datazakldogovora.setGeometry(QtCore.QRect(340, 360, 151, 22))
        self.datazakldogovora.setObjectName("datazakldogovora")
        self.label_9 = QtWidgets.QLabel(self.background)
        self.label_9.setGeometry(QtCore.QRect(150, 400, 161, 16))
        self.label_9.setObjectName("label_9")
        self.dataezhemes = QtWidgets.QDateEdit(self.background)
        self.dataezhemes.setGeometry(QtCore.QRect(340, 400, 151, 22))
        self.dataezhemes.setObjectName("dataezhemes")
        self.label_10 = QtWidgets.QLabel(self.background)
        self.label_10.setGeometry(QtCore.QRect(150, 440, 151, 20))
        self.label_10.setObjectName("label_10")
        self.vychislyaemayaplata = QtWidgets.QLineEdit(self.background)
        self.vychislyaemayaplata.setGeometry(QtCore.QRect(340, 440, 151, 20))
        self.vychislyaemayaplata.setObjectName("vychislyaemayaplata")
        self.vychislyaemayaplata.setReadOnly(True)
        self.okey = QtWidgets.QPushButton(self.background)
        self.okey.setGeometry(QtCore.QRect(180, 530, 91, 31))
        self.okey.setObjectName("okey")
        self.okey.clicked.connect(lambda: self.save())
        self.okey.clicked.connect(lambda: self.pechat())
        self.okey_2 = QtWidgets.QPushButton(self.background)
        self.okey_2.setGeometry(QtCore.QRect(360, 530, 91, 31))
        self.okey_2.setObjectName("okey_2")
        self.label_4 = QtWidgets.QLabel(self.background)
        self.label_4.setGeometry(QtCore.QRect(200, 70, 241, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(22)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        def dobavlenie():
            try:
                db = mdb.connect('localhost', 'root', 'root', 'arenda')
                mycursor = db.cursor()
                query = "SELECT IIN from fizlitca"
                mycursor.execute(query)
                result = mycursor.fetchall()
                result = list(result)
                for i in range(len(result)):
                    result[i] = result[i][0].replace("(", "").replace(")", "")
                for i in result:
                    self.viborarendatora.addItem(str(i))

                
                    
            except mdb.Error as e:
                error = QMessageBox()
                error.setText('Подключение невозможно!')
                error.exec_()

            try:
                db = mdb.connect('localhost', 'root', 'root', 'arenda')
                mycursor = db.cursor()
                query = "SELECT Adress from objecty"
                mycursor.execute(query)
                result = mycursor.fetchall()
                result = list(result)
                for i in range(len(result)):
                    result[i] = result[i][0].replace("(", "").replace(")", "")
                for i in result:
                    self.viborobjecta.addItem(str(i))

                
                    
            except mdb.Error as e:
                error = QMessageBox()
                error.setText('Подключение невозможно!')
                error.exec_()

            
        dobavlenie()
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def save(self):
        
        try:
            db = mdb.connect('localhost', 'root', 'root', 'arenda')
            mycursor = db.cursor()
            global IIN1,VAR1,VAR2,VAR3,VAR4,VAR5,VAR6
            IIN1 = self.viborarendatora.currentText()
            VAR1 = self.viborobjecta.currentText()
            VAR2 = self.datanachalaarendy.text()
            VAR3 = self.dataokonchaniyaarendy.text()
            VAR4 = self.datazakldogovora.text()
            VAR5 = self.dataezhemes.text()
            VAR6 = self.vychislyaemayaplata.text()
            query = "INSERT INTO `dogovory` (`IIN_Arendatora`, `ID_Objecta`, `Datanachala_arendy`, `Datakontca_arendy`, `Datazakluych_dogovora`, `Dataezhemes_oplaty`, `Month_price`) VALUES ('" +IIN1 + "', '" +VAR1 + "', '" +VAR2 + "', '" +VAR3 + "', '" +VAR4 + "', '" +VAR5 + "', '" +VAR6 + "')"
            # query = "INSERT INTO `VARGAMING` (`IIN`, `VAR1`, `VAR2`, `VAR3`, `VAR4`, `VAR5`, `VAR6`) VALUES ('"+ IIN1 + "', '" + VAR1 + "', '" + VAR2 + "', '" + VAR3 + "', '" + VAR4 + "', '" + VAR5 + "', '" + VAR6 + "')"
            mycursor.execute(query)
            db.commit()
            error = QMessageBox()
            error.setWindowTitle('Успех')
            error.setText('Договор успешно создан!')
            error.buttons = QtWidgets.QMessageBox.Ok | QtWidgets.QMessageBox.Cancel
            error.exec_()
            
        

        except mdb.Error as e:
                print (e)
                error = QMessageBox()
                error.setText('Переделывай, данные не внесены!')
                error.exec_()

    
    def pechat(self):
        document = Document('DogovorShablonPython.docx')  
        for paragraph in document.paragraphs:
            inline = paragraph.runs
            for i in range(len(inline)):
                if 'ArendnayaPlata' in inline[i].text:
                    inline[i].text = inline[i].text.replace('ArendnayaPlata', VAR6)
                if 'ChisloOplaty' in inline[i].text:
                    inline[i].text = inline[i].text.replace('ChisloOplaty', VAR5)
                if 'DataDogovora' in inline[i].text:
                    inline[i].text = inline[i].text.replace('DataDogovora', VAR4)
                if 'DataOkonchaniya' in inline[i].text:
                    inline[i].text = inline[i].text.replace('DataOkonchaniya', VAR3)
                if 'DataNachala' in inline[i].text:
                    inline[i].text = inline[i].text.replace('DataNachala', VAR2)
                if 'AdressObject' in inline[i].text:
                    inline[i].text = inline[i].text.replace('AdressObject', VAR1)
                if 'Arendator' in inline[i].text:
                    inline[i].text = inline[i].text.replace('Arendator', IIN1)
                if 'Square' in inline[i].text:
                    inline[i].text = inline[i].text.replace('Square', Object_Square)
                if 'Name' in inline[i].text:
                    inline[i].text = inline[i].text.replace('Name', Object_name)
        document.save('filled_dogovor.docx')


    def changeoplata(self):
        try:
                db = mdb.connect('localhost', 'root', 'root', 'arenda')
                mycursor = db.cursor()
                VAR1 = self.viborobjecta.currentText()
                query = "SELECT Plata from objecty where Adress = '" +VAR1 + "' "
                mycursor.execute(query)
                result = mycursor.fetchone()
                result_str = str(result[0]).replace("(", "").replace(")", "")
                for i in result:
                   self.vychislyaemayaplata.setText(str(result_str))
                query1 = "SELECT Name from objecty where Adress = '" +VAR1 + "' "
                query2 = "SELECT Object_Square from objecty where Adress = '" +VAR1 + "' "
                mycursor.execute(query1)
                global Object_name
                Object_name = mycursor.fetchone()
                Object_name = str(Object_name[0]).replace("(", "").replace(")", "")
                mycursor.execute(query2)
                global Object_Square
                Object_Square = mycursor.fetchone()
                Object_Square = str(Object_Square[0]).replace("(", "").replace(")", "")
                

                
                    
        except mdb.Error as e:
            error = QMessageBox()
            error.setText('Подключение невозможно!')
            error.exec_()
        
    
        

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Создание договора"))
        self.label.setText(_translate("Dialog", "ИИН арендатора:"))
        self.label_2.setText(_translate("Dialog", "Выбор объекта:"))
        self.label_3.setText(_translate("Dialog", "Дата начала аренды:"))
        self.label_7.setText(_translate("Dialog", "Дата окончания аренды:"))
        self.dataokonchaniyaarendy.setDisplayFormat(_translate("Dialog", "yyyy-MM-dd"))
        self.datanachalaarendy.setDisplayFormat(_translate("Dialog", "yyyy-MM-dd"))
        self.label_8.setText(_translate("Dialog", "Дата заключения договора:"))
        self.datazakldogovora.setDisplayFormat(_translate("Dialog", "yyyy-MM-dd"))
        self.label_9.setText(_translate("Dialog", "Дата ежемесячной оплаты:"))
        self.dataezhemes.setDisplayFormat(_translate("Dialog", "yyyy-MM-dd"))
        self.label_10.setText(_translate("Dialog", "Месячная арендная плата:"))
        self.okey.setText(_translate("Dialog", "ОК"))
        self.okey_2.setText(_translate("Dialog", "Отмена"))
        self.label_4.setText(_translate("Dialog", "Создание договора"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
